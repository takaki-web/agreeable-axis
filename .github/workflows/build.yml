name: Build and Deploy  # ワークフローの名前を設定します。

on:  # このワークフローがトリガーされる条件を定義します。
  push:  # pushイベント時にワークフローを実行します。
    branches:
      - main  # 'main'ブランチへのpush時にのみワークフローを実行します。

jobs:  # ワークフローで実行するジョブを定義します。
  build-and-deploy:  # ジョブの名前を設定します。任意の名前を使用できます。
    runs-on: ubuntu-latest  # ジョブを実行するランナーのオペレーティングシステムを指定します。

    steps:  # ジョブで実行するステップを定義します。
      - name: Checkout  # ステップの名前を設定します。このステップではリポジトリのコードをチェックアウトします。
        uses: actions/checkout@v2.3.1  # GitHubが提供する公式アクションを使用します。これにより、ワークフローがリポジトリのコードにアクセスできます。

      - name: Use Node.js  # ステップの名前を設定します。このステップではNode.jsをセットアップします。
        uses: actions/setup-node@v2.1.4  # Node.jsをセットアップするための公式アクションを使用します。
        with:  # アクションの追加設定を定義します。
          node-version: '14.x'  # 使用するNode.jsのバージョンを指定します。

      - name: Install and Build  # ステップの名前を設定します。このステップでは依存関係のインストールとビルドを行います。
        run: |  # ステップで実行するコマンドを定義します。
          npm install  # プロジェクトの依存関係をインストールします。
          npm run build  # Astroプロジェクトをビルドします。

      - name: Deploy  # ステップの名前を設定します。このステップではビルドしたサイトをデプロイします。
        uses: peaceiris/actions-gh-pages@v3.8.0  # GitHub Pagesにデプロイするための公式でないが広く利用されてい
        # います。
        with:  # アクションの追加設定を定義します。
          github_token: ${{ secrets.GITHUB_TOKEN }}  # GitHubから提供される秘密のトークンを使用します。これにより、ワークフローがあなたのGitHubアカウントを代理で行動できます。このトークンはGitHubによって自動的に設定されます。そのため、ユーザーが自分で設定する必要はありません。
          publish_dir: ./dist  # デプロイするファイルが含まれるディレクトリを指定します。'npm run build'によって生成された静的サイトのファイルはデフォルトで'./dist'ディレクトリに格納されます。
